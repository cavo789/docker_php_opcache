; Determines if Zend OpCache is enabled
opcache.enable=${OPCACHE_ENABLE}

; Determines if Zend OpCache is enabled for the CLI version of PHP
opcache.enable_cli=${OPCACHE_ENABLE_CLI}

; The Opcache shared memory storage size.
opcache.memory_consumption=${OPCACHE_MEMORY_CONSUMPTION}

; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer=64

; The maximum number of keys (=files) in the OpCache hash table.
; Only numbers between 200 and 1000000 are allowed.
opcache.max_accelerated_files=${OPCACHE_MAX_ACCELERATED_FILES}

; When disabled, you must reset the OpCache manually or restart the
; webserver for changes to the filesystem to take effect.
; For Development / testing, keep 1
; For performance / production, keep 0
opcache.validate_timestamps=${OPCACHE_VALIDATE_TIMESTAMPS}

; opcache.revalidate_freq How often in seconds should the code
; cache expire and check if your code has changed. 0 means it
; checks your PHP code every single request IF YOU HAVE 
; opcache.validate_timestamps ENABLED. opcache.validate_timestamps
; should not be enabled by default, as long as it's disabled then any value for OpCache.
; revalidate_freq will basically be ignored. You should really only ever enable
; this during development, you don't really want to enable this setting for a production application.
opcache.revalidate_freq=60

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
opcache.save_comments=0

; If enabled, a fast shutdown sequence is used for the accelerated code
; Depending on the used Memory Manager this may cause some incompatibilities.
opcache.fast_shutdown=1
